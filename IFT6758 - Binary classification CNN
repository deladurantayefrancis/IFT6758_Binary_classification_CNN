{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ift6758_tp2","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"vXRBoQatuTH2","colab_type":"code","outputId":"4d3ae254-114c-432b-cb4a-897b5f9a67ac","executionInfo":{"status":"ok","timestamp":1545494447706,"user_tz":300,"elapsed":33826,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"cell_type":"code","source":["# http://pytorch.org/\n","from os.path import exists\n","from wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag\n","platform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())\n","cuda_output = !ldconfig -p|grep cudart.so|sed -e 's/.*\\.\\([0-9]*\\)\\.\\([0-9]*\\)$/cu\\1\\2/'\n","accelerator = cuda_output[0] if exists('/dev/nvidia0') else 'cpu'\n","\n","!pip install -q http://download.pytorch.org/whl/{accelerator}/torch-0.4.1-{platform}-linux_x86_64.whl torchvision"],"execution_count":0,"outputs":[{"output_type":"stream","text":["tcmalloc: large alloc 1073750016 bytes == 0x59134000 @  0x7f75489c32a4 0x591a07 0x5b5d56 0x502e9a 0x506859 0x502209 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x507641 0x502209 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x507641 0x504c28 0x502540 0x502f3d 0x507641\n"],"name":"stdout"}]},{"metadata":{"id":"BIELup9cGxuw","colab_type":"code","colab":{}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","import numpy as np\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","from datetime import datetime\n","from google.colab import files\n","from torch.autograd import Variable"],"execution_count":0,"outputs":[]},{"metadata":{"id":"IvDAWd5gGNHh","colab_type":"code","outputId":"7b001ddd-1a94-4c9c-b2b1-1698d9b66040","executionInfo":{"status":"ok","timestamp":1545494448367,"user_tz":300,"elapsed":34453,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["cuda\n"],"name":"stdout"}]},{"metadata":{"id":"os_24wcEK6Hs","colab_type":"code","outputId":"8411c381-f5e8-4a64-fc39-b679034cab80","executionInfo":{"status":"ok","timestamp":1545494493996,"user_tz":300,"elapsed":7390,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":274}},"cell_type":"code","source":["#\"\"\"\n","!wget --header=\"Host: doc-0s-3g-docs.googleusercontent.com\" --header=\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" --header=\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\" --header=\"Accept-Language: fr-CA,fr;q=0.9,en-CA;q=0.8,en;q=0.7,fr-FR;q=0.6,en-US;q=0.5\" --header=\"Referer: https://drive.google.com/drive/folders/1YCkAhJBhieXhYPZNopTaxIm27YVPnmwS\" --header=\"Cookie: AUTH_6gh826viimsbib34ra3epfqs2c8205p6_nonce=q0ldg7rb7040o\" --header=\"Connection: keep-alive\" \"https://doc-0s-3g-docs.googleusercontent.com/docs/securesc/5dgphd5c73kf7240rslgqovikmdemhth/uthg1c2lmqgfvdc9mj4nm337qmf1ve12/1545494400000/10276500407494770900/10276500407494770900/14pHdj_VdkkUkPe_uWUUMfMahw4Nh9EE5?e=download&nonce=q0ldg7rb7040o&user=10276500407494770900&hash=ji75u5fqg2110vqbrrvrld19g9daefnd\" -O \"PATCH.amat.zip\" -c\n","!unzip 'PATCH.amat'\n","#\"\"\""],"execution_count":0,"outputs":[{"output_type":"stream","text":["--2018-12-22 16:02:55--  https://doc-0s-3g-docs.googleusercontent.com/docs/securesc/5dgphd5c73kf7240rslgqovikmdemhth/uthg1c2lmqgfvdc9mj4nm337qmf1ve12/1545494400000/10276500407494770900/10276500407494770900/14pHdj_VdkkUkPe_uWUUMfMahw4Nh9EE5?e=download&nonce=q0ldg7rb7040o&user=10276500407494770900&hash=ji75u5fqg2110vqbrrvrld19g9daefnd\n","Resolving doc-0s-3g-docs.googleusercontent.com (doc-0s-3g-docs.googleusercontent.com)... 74.125.204.132, 2404:6800:4008:c04::84\n","Connecting to doc-0s-3g-docs.googleusercontent.com (doc-0s-3g-docs.googleusercontent.com)|74.125.204.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: unspecified [application/zip]\n","Saving to: ‘PATCH.amat.zip’\n","\n","PATCH.amat.zip          [ <=>                ]   3.95M  --.-KB/s    in 0.04s   \n","\n","2018-12-22 16:02:56 (111 MB/s) - ‘PATCH.amat.zip’ saved [4138662]\n","\n","Archive:  PATCH.amat.zip\n","  inflating: PATCH.amat              \n"],"name":"stdout"}]},{"metadata":{"id":"4DU8hLCoGQfY","colab_type":"code","outputId":"a8feff81-68a8-492c-c8fd-023359680bed","executionInfo":{"status":"ok","timestamp":1545494512787,"user_tz":300,"elapsed":5248,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":274}},"cell_type":"code","source":["#\"\"\"\n","# download zip files to notebook and unzip the files\n","!wget --header=\"Host: doc-10-3g-docs.googleusercontent.com\" --header=\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\" --header=\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\" --header=\"Accept-Language: fr-CA,fr;q=0.9,en-CA;q=0.8,en;q=0.7,fr-FR;q=0.6,en-US;q=0.5\" --header=\"Referer: https://drive.google.com/drive/folders/1YCkAhJBhieXhYPZNopTaxIm27YVPnmwS\" --header=\"Cookie: AUTH_6gh826viimsbib34ra3epfqs2c8205p6=10276500407494770900|1545494400000|6a44jtm4oumfkc7ft88f4up7107dni8j\" --header=\"Connection: keep-alive\" \"https://doc-10-3g-docs.googleusercontent.com/docs/securesc/5dgphd5c73kf7240rslgqovikmdemhth/qr6oi12pemvvun7l2u41eh81uqom8fl3/1545494400000/10276500407494770900/10276500407494770900/1sRM0yVxo99ylrODCsyt6VlYMojkZqo69?e=download\" -O \"PATCH_test.zip\" -c\n","!unzip 'PATCH_test'\n","#\"\"\""],"execution_count":0,"outputs":[{"output_type":"stream","text":["--2018-12-22 16:03:16--  https://doc-10-3g-docs.googleusercontent.com/docs/securesc/5dgphd5c73kf7240rslgqovikmdemhth/qr6oi12pemvvun7l2u41eh81uqom8fl3/1545494400000/10276500407494770900/10276500407494770900/1sRM0yVxo99ylrODCsyt6VlYMojkZqo69?e=download\n","Resolving doc-10-3g-docs.googleusercontent.com (doc-10-3g-docs.googleusercontent.com)... 74.125.204.132, 2404:6800:4008:c04::84\n","Connecting to doc-10-3g-docs.googleusercontent.com (doc-10-3g-docs.googleusercontent.com)|74.125.204.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1251083 (1.2M) [application/x-zip-compressed]\n","Saving to: ‘PATCH_test.zip’\n","\n","PATCH_test.zip      100%[===================>]   1.19M  --.-KB/s    in 0.02s   \n","\n","2018-12-22 16:03:17 (65.4 MB/s) - ‘PATCH_test.zip’ saved [1251083/1251083]\n","\n","Archive:  PATCH_test.zip\n","  inflating: PATCH_test.amat         \n"],"name":"stdout"}]},{"metadata":{"id":"1Kz3tm8KfIzi","colab_type":"code","colab":{}},"cell_type":"code","source":["def load_file(file_name, test_set=False, seed=6758):\n","\n","    with open(file_name) as file:\n","\n","        data = []\n","        count = 0\n","        for line in file.readlines():\n","            if test_set:\n","                splitted_line = line.split('.000000000000000000e+00')[:-1]\n","            else:\n","                splitted_line = line.split('.0000000e+00')[:-1]\n","            cleaned_line = list(map(str.strip, splitted_line))\n","            data.append(cleaned_line)\n","\n","    data = np.asarray(data, dtype=np.int)\n","    \n","    if not test_set:\n","        print('shuffle')\n","        np.random.seed(seed)\n","        np.random.shuffle(data)\n","    \n","    data = torch.from_numpy(data).type(torch.cuda.FloatTensor).to(device)\n","    \n","    if test_set:\n","        return data.reshape((-1,1,28,28))\n","    else:\n","        return data[:,:-1].reshape((-1,1,28,28)), data[:,-1]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"jRwXC4-qfQup","colab_type":"code","outputId":"ebdb773a-ee3b-402c-cfe8-b069dae60111","executionInfo":{"status":"ok","timestamp":1545494532856,"user_tz":300,"elapsed":21792,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":90}},"cell_type":"code","source":["data, labels = load_file('PATCH.amat')\n","print(data.shape)\n","print(labels.shape)\n","\n","test_data = load_file('PATCH_test.amat', test_set=True)\n","print(test_data.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["shuffle\n","torch.Size([50000, 1, 28, 28])\n","torch.Size([50000])\n","torch.Size([8000, 1, 28, 28])\n"],"name":"stdout"}]},{"metadata":{"id":"gq6gj8KVghet","colab_type":"code","outputId":"ed987f00-6da9-4d35-8189-dc9a4fdd134f","executionInfo":{"status":"ok","timestamp":1545494532857,"user_tz":300,"elapsed":21212,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":55}},"cell_type":"code","source":["\"\"\"\n","train_data = torch.from_numpy(data[:40000]).type('torch.FloatTensor').to(device)\n","train_labels = torch.from_numpy(labels[:40000]).type('torch.FloatTensor').to(device)\n","\n","valid_data = torch.from_numpy(data[40000:]).type('torch.FloatTensor').to(device)\n","valid_labels = torch.from_numpy(labels[40000:]).type('torch.LongTensor').to(device)\n","\n","test_data = torch.from_numpy(test_data).type('torch.FloatTensor').to(device)\n","\"\"\""],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\ntrain_data = torch.from_numpy(data[:40000]).type('torch.FloatTensor').to(device)\\ntrain_labels = torch.from_numpy(labels[:40000]).type('torch.FloatTensor').to(device)\\n\\nvalid_data = torch.from_numpy(data[40000:]).type('torch.FloatTensor').to(device)\\nvalid_labels = torch.from_numpy(labels[40000:]).type('torch.LongTensor').to(device)\\n\\ntest_data = torch.from_numpy(test_data).type('torch.FloatTensor').to(device)\\n\""]},"metadata":{"tags":[]},"execution_count":12}]},{"metadata":{"id":"l7VhTWRJkvIS","colab_type":"code","colab":{}},"cell_type":"code","source":["class ConvNet(nn.Module):\n","\n","    def __init__(self, A, B, n_classes):\n","\n","        super(ConvNet, self).__init__()\n","\n","        # dimensions of input\n","        self.A = A\n","        self.B = B\n","\n","        # number of classes\n","        self.n_classes = n_classes\n","\n","        # network layers\n","        self.layer1 = nn.Sequential(\n","            nn.Conv2d(in_channels=1, out_channels=32, kernel_size=5, stride=1, padding=2),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=1),\n","            nn.BatchNorm2d(32),\n","        )\n","        self.layer2 = nn.Sequential(\n","            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=5, stride=1, padding=2),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=3, stride=3),\n","            nn.BatchNorm2d(64),\n","        )\n","        self.layer3 = nn.Sequential(\n","            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=1),\n","            nn.BatchNorm2d(128),\n","        )\n","        self.layer4 = nn.Sequential(\n","            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=1),\n","            nn.BatchNorm2d(128),\n","        )\n","        self.layer5 = nn.Sequential(\n","            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=1),\n","            nn.BatchNorm2d(256),\n","        )\n","        self.layer6 = nn.Sequential(\n","            nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=1),\n","            nn.BatchNorm2d(256),\n","        )\n","        self.layer7 = nn.Sequential(\n","            nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1),\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=1),\n","            nn.BatchNorm2d(256),\n","        )\n","        \n","        self.fc1 = nn.Sequential(\n","            nn.Linear(256 * 4 * 4, 128),\n","            nn.ReLU()\n","        )\n","        self.fc2 = nn.Sequential(\n","            nn.Linear(128, 16),\n","            nn.ReLU()\n","        )\n","        self.fc3 = nn.Sequential(\n","            nn.Linear(16, n_classes),\n","        )\n","        \n","        self.sm = nn.Softmax(dim=1)\n","\n","\n","    def forward(self, x):\n","        \n","        out = self.layer1(x)    #   1 x 28 x 28 -->  32 x 27 x 27\n","        out = self.layer2(out)  #  32 x 27 x 27 -->  64 x  9 x  9\n","        out = self.layer3(out)  #  64 x  9 x  9 --> 128 x  8 x  8\n","        out = self.layer4(out)  # 128 x  8 x  8 --> 128 x  7 x  7\n","        out = self.layer5(out)  # 128 x  7 x  7 --> 256 x  6 x  6\n","        out = self.layer6(out)  # 256 x  6 x  6 --> 256 x  5 x  5\n","        out = self.layer7(out)  # 256 x  5 x  5 --> 256 x  4 x  4\n","        \n","        out = out.reshape((x.shape[0], -1))\n","        \n","        out = self.fc1(out)     # 256 x 4 x 4 --> 128\n","        out = self.fc2(out)     # 128 --> 16\n","        out = self.fc3(out)     # 16 --> 2\n","        \n","        out = self.sm(out)\n","\n","        return out"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lbstthg4la61","colab_type":"code","colab":{}},"cell_type":"code","source":["class Model:\n","\n","    def __init__(self, network, batch_size):\n","\n","        # neural network for the model\n","        self.network = network\n","\n","        # choice of loss function\n","        self.criterion = nn.BCELoss()\n","\n","        # choice of optimizer\n","        self.optimizer = optim.Adam(self.network.parameters())\n","\n","        # batch size\n","        self.batch_size = batch_size\n","\n","\n","    def train(self, train_data, train_labels, valid_data, valid_labels, n_epochs):\n","\n","        print(datetime.now())\n","\n","        for epoch in range(n_epochs):\n","\n","            print('Epoch', epoch+1, end='')\n","\n","            epoch_loss = 0\n","\n","            for i in range( int(train_data.shape[0] / self.batch_size) ):\n","\n","                # extract a batch of data\n","                data = train_data[i * self.batch_size : (i+1) * self.batch_size].to(device)\n","                labels = train_labels[i * self.batch_size : (i+1) * self.batch_size].to(device)\n","\n","                # warp data in a Variable object\n","                data = Variable(data).to(device)\n","                labels = Variable(labels).to(device)\n","\n","                # forward pass (get predictions and compute loss)\n","                predictions = self.network(data)\n","                loss = self.criterion(predictions[:,0], labels)\n","                \n","                # backward pass and optimize\n","                self.optimizer.zero_grad()\n","                loss.backward()\n","                self.optimizer.step()\n","\n","                # add loss of this batch to loss of the epoch\n","                epoch_loss += loss.data.item()\n","\n","            print(', loss =', epoch_loss)\n","            \n","            success_rate = self.success_valid(valid_data, valid_labels.type(torch.cuda.LongTensor))\n","            print('Success rate on valid data:', success_rate, '%')\n","            \n","            print(datetime.now())\n","\n","\n","    def predict(self, data):\n","        \n","        predictions = self.network(data)\n","        \n","        return torch.argmin(predictions, dim=1)\n","    \n","    \n","    def get_success_rate(self, predictions, labels):\n","        \n","        success_rate = torch.sum(predictions.eq(labels)).item() / labels.shape[0] * 100.0\n","        \n","        return success_rate\n","      \n","      \n","    def success_valid(self, valid_data, valid_labels):\n","      \n","        success_rate = 0\n","        for i in range(10):\n","            valid_preds = self.predict(valid_data[i*1000:(i+1)*1000])\n","            success_rate += self.get_success_rate(valid_preds, valid_labels[i*1000:(i+1)*1000])\n","            \n","        success_rate /= 10\n","        \n","        return success_rate"],"execution_count":0,"outputs":[]},{"metadata":{"id":"e3Wrwi7OlbAY","colab_type":"code","outputId":"eb53479a-2f1a-4640-df93-ad6737dcbea7","executionInfo":{"status":"ok","timestamp":1545494532861,"user_tz":300,"elapsed":20614,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["network = ConvNet(A=28, B=28, n_classes=2).cuda()\n","model = Model(network, batch_size=128)\n","\n","SEED = 6758\n","np.random.seed(SEED)\n","torch.manual_seed(SEED)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f9b028ac390>"]},"metadata":{"tags":[]},"execution_count":15}]},{"metadata":{"id":"bGIUgQmv9UNz","colab_type":"code","outputId":"3497a6b3-90c3-4ca0-9948-ec80e60815e7","executionInfo":{"status":"ok","timestamp":1545495767579,"user_tz":300,"elapsed":1254955,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":2763}},"cell_type":"code","source":["# train model on training data\n","model.train(data[10000:], labels[10000:], data[:10000], labels[:10000], n_epochs=50)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2018-12-22 16:03:40.892206\n","Epoch 1, loss = 70.00382916629314\n","Success rate on valid data: 94.39999999999998 %\n","2018-12-22 16:04:05.343310\n","Epoch 2, loss = 34.44312381371856\n","Success rate on valid data: 97.43999999999998 %\n","2018-12-22 16:04:29.771967\n","Epoch 3, loss = 23.302397907245904\n","Success rate on valid data: 98.64 %\n","2018-12-22 16:04:54.393539\n","Epoch 4, loss = 20.541486620437354\n","Success rate on valid data: 97.82 %\n","2018-12-22 16:05:19.093640\n","Epoch 5, loss = 17.29730596137233\n","Success rate on valid data: 98.66000000000001 %\n","2018-12-22 16:05:43.809464\n","Epoch 6, loss = 15.042161045013927\n","Success rate on valid data: 98.49000000000001 %\n","2018-12-22 16:06:08.522924\n","Epoch 7, loss = 14.019989866530523\n","Success rate on valid data: 98.94999999999999 %\n","2018-12-22 16:06:33.250478\n","Epoch 8, loss = 12.743787956773303\n","Success rate on valid data: 98.32000000000001 %\n","2018-12-22 16:06:57.972880\n","Epoch 9, loss = 11.78148178360425\n","Success rate on valid data: 99.03 %\n","2018-12-22 16:07:22.700771\n","Epoch 10, loss = 9.83621813566424\n","Success rate on valid data: 99.08000000000001 %\n","2018-12-22 16:07:47.419948\n","Epoch 11, loss = 10.494661901379004\n","Success rate on valid data: 98.64000000000001 %\n","2018-12-22 16:08:12.115042\n","Epoch 12, loss = 8.493980698054656\n","Success rate on valid data: 99.11999999999999 %\n","2018-12-22 16:08:36.821975\n","Epoch 13, loss = 7.49287414457649\n","Success rate on valid data: 99.10000000000001 %\n","2018-12-22 16:09:01.546524\n","Epoch 14, loss = 8.152951236057561\n","Success rate on valid data: 98.83 %\n","2018-12-22 16:09:26.264302\n","Epoch 15, loss = 7.793843774590641\n","Success rate on valid data: 98.97000000000001 %\n","2018-12-22 16:09:50.984959\n","Epoch 16, loss = 8.766254700429272\n","Success rate on valid data: 98.94000000000001 %\n","2018-12-22 16:10:15.689922\n","Epoch 17, loss = 5.833850068243919\n","Success rate on valid data: 98.96000000000001 %\n","2018-12-22 16:10:40.414846\n","Epoch 18, loss = 5.695728196849814\n","Success rate on valid data: 99.07000000000001 %\n","2018-12-22 16:11:05.118425\n","Epoch 19, loss = 5.408791828202084\n","Success rate on valid data: 99.1 %\n","2018-12-22 16:11:29.824617\n","Epoch 20, loss = 5.177610727958381\n","Success rate on valid data: 98.92999999999998 %\n","2018-12-22 16:11:54.510508\n","Epoch 21, loss = 5.047146332683042\n","Success rate on valid data: 98.96000000000001 %\n","2018-12-22 16:12:19.210527\n","Epoch 22, loss = 4.3822544556169305\n","Success rate on valid data: 99.06 %\n","2018-12-22 16:12:43.924039\n","Epoch 23, loss = 4.812870883833966\n","Success rate on valid data: 99.14 %\n","2018-12-22 16:13:08.617078\n","Epoch 24, loss = 3.880322834898834\n","Success rate on valid data: 99.11 %\n","2018-12-22 16:13:33.274737\n","Epoch 25, loss = 4.680964519327972\n","Success rate on valid data: 99.19 %\n","2018-12-22 16:13:57.962979\n","Epoch 26, loss = 3.3213154055119958\n","Success rate on valid data: 99.22 %\n","2018-12-22 16:14:22.657001\n","Epoch 27, loss = 3.447713736899459\n","Success rate on valid data: 98.97 %\n","2018-12-22 16:14:47.364249\n","Epoch 28, loss = 3.1794130144407973\n","Success rate on valid data: 99.14999999999999 %\n","2018-12-22 16:15:12.065939\n","Epoch 29, loss = 3.2011695979963406\n","Success rate on valid data: 99.2 %\n","2018-12-22 16:15:36.773478\n","Epoch 30, loss = 3.149506023240974\n","Success rate on valid data: 99.03 %\n","2018-12-22 16:16:01.474191\n","Epoch 31, loss = 2.9001724609624944\n","Success rate on valid data: 99.14000000000001 %\n","2018-12-22 16:16:26.183728\n","Epoch 32, loss = 2.3855758976496872\n","Success rate on valid data: 99.18999999999998 %\n","2018-12-22 16:16:50.876383\n","Epoch 33, loss = 2.7592722823110307\n","Success rate on valid data: 98.97 %\n","2018-12-22 16:17:15.576589\n","Epoch 34, loss = 2.2556751107640594\n","Success rate on valid data: 99.08 %\n","2018-12-22 16:17:40.269324\n","Epoch 35, loss = 1.9445980448108457\n","Success rate on valid data: 98.96000000000001 %\n","2018-12-22 16:18:04.985858\n","Epoch 36, loss = 2.104888420250063\n","Success rate on valid data: 98.89 %\n","2018-12-22 16:18:29.660835\n","Epoch 37, loss = 2.8792440040851943\n","Success rate on valid data: 99.02999999999999 %\n","2018-12-22 16:18:54.308392\n","Epoch 38, loss = 2.5357606850702723\n","Success rate on valid data: 99.03000000000002 %\n","2018-12-22 16:19:19.019040\n","Epoch 39, loss = 2.054940772912232\n","Success rate on valid data: 99.22 %\n","2018-12-22 16:19:43.709273\n","Epoch 40, loss = 1.2375527574953011\n","Success rate on valid data: 99.15 %\n","2018-12-22 16:20:08.416768\n","Epoch 41, loss = 2.111149125037173\n","Success rate on valid data: 99.19000000000001 %\n","2018-12-22 16:20:33.114816\n","Epoch 42, loss = 1.5861162713117665\n","Success rate on valid data: 98.99000000000001 %\n","2018-12-22 16:20:57.811490\n","Epoch 43, loss = 1.3716699744572907\n","Success rate on valid data: 98.98 %\n","2018-12-22 16:21:22.517435\n","Epoch 44, loss = 1.7053463666184143\n","Success rate on valid data: 99.05 %\n","2018-12-22 16:21:47.228776\n","Epoch 45, loss = 1.678875791027167\n","Success rate on valid data: 99.19 %\n","2018-12-22 16:22:11.922976\n","Epoch 46, loss = 1.4858607727114759\n","Success rate on valid data: 98.96 %\n","2018-12-22 16:22:36.629886\n","Epoch 47, loss = 1.4359785833203205\n","Success rate on valid data: 99.20000000000002 %\n","2018-12-22 16:23:01.343005\n","Epoch 48, loss = 1.379898165501345\n","Success rate on valid data: 99.0 %\n","2018-12-22 16:23:26.030078\n","Epoch 49, loss = 1.742022333372006\n","Success rate on valid data: 99.08000000000001 %\n","2018-12-22 16:23:50.689483\n","Epoch 50, loss = 1.3342384550599036\n","Success rate on valid data: 98.71 %\n","2018-12-22 16:24:15.387859\n"],"name":"stdout"}]},{"metadata":{"id":"EvJAavoQHh1n","colab_type":"code","outputId":"5d0212ea-e613-43f6-e237-60c1b585f83b","executionInfo":{"status":"ok","timestamp":1545495768909,"user_tz":300,"elapsed":1255992,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["success_rate = model.success_valid(data[:10000], labels[:10000].type(torch.cuda.LongTensor))\n","print('Success rate on valid data:', success_rate, '%')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Success rate on valid data: 98.71 %\n"],"name":"stdout"}]},{"metadata":{"id":"ryl9qZaYXohx","colab_type":"code","outputId":"a3a7454b-47fd-41a1-fdfe-94af7eec8164","executionInfo":{"status":"ok","timestamp":1545496074355,"user_tz":300,"elapsed":1561189,"user":{"displayName":"Francis de Ladurantaye","photoUrl":"https://lh5.googleusercontent.com/-b_7mI8ZmLIA/AAAAAAAAAAI/AAAAAAAAAX8/zADAE3XnewU/s64/photo.jpg","userId":"10276500407494770900"}},"colab":{"base_uri":"https://localhost:8080/","height":581}},"cell_type":"code","source":["model.train(data, labels, data[:10000], labels[:10000], n_epochs=10)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["2018-12-22 16:24:16.728084\n","Epoch 1, loss = 4.4357241540674295\n","Success rate on valid data: 99.33000000000001 %\n","2018-12-22 16:24:47.263110\n","Epoch 2, loss = 3.4767109504409746\n","Success rate on valid data: 99.22 %\n","2018-12-22 16:25:17.821355\n","Epoch 3, loss = 2.8902449867282485\n","Success rate on valid data: 99.53 %\n","2018-12-22 16:25:48.361276\n","Epoch 4, loss = 3.2665264821930577\n","Success rate on valid data: 99.44000000000001 %\n","2018-12-22 16:26:18.909325\n","Epoch 5, loss = 2.7399165748815903\n","Success rate on valid data: 99.55000000000001 %\n","2018-12-22 16:26:49.455420\n","Epoch 6, loss = 2.5999427400674904\n","Success rate on valid data: 99.4 %\n","2018-12-22 16:27:19.988422\n","Epoch 7, loss = 2.479555709954184\n","Success rate on valid data: 99.60999999999999 %\n","2018-12-22 16:27:50.543391\n","Epoch 8, loss = 1.3968396554887477\n","Success rate on valid data: 99.52 %\n","2018-12-22 16:28:21.093311\n","Epoch 9, loss = 2.2678726398041817\n","Success rate on valid data: 99.61999999999999 %\n","2018-12-22 16:28:51.638497\n","Epoch 10, loss = 2.3246651233928333\n","Success rate on valid data: 99.72 %\n","2018-12-22 16:29:22.159192\n"],"name":"stdout"}]},{"metadata":{"id":"ahuuOXZLrzs2","colab_type":"code","colab":{}},"cell_type":"code","source":["# predictions on test data\n","fn = 'CNN_' + str(success_rate) + '%.csv'\n","\n","test_preds = model.predict(test_data[:4000])\n","with open(fn, 'w+') as f:\n","    for item in test_preds:\n","        f.write(str(item.item()))\n","        f.write('\\n')\n","        \n","test_preds = model.predict(test_data[4000:])\n","with open(fn, 'a+') as f:\n","    for item in test_preds:\n","        f.write(str(item.item()))\n","        f.write('\\n')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"kzDTC61ipsbV","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}